package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.62

import (
	"context"
	"crypto/rand"
	"encoding/base64"
	"fmt"
	"github.com/golang-jwt/jwt/v5"
	"golang.org/x/crypto/argon2"
	"manulatorre98/trading/customErrors"
	"manulatorre98/trading/graph/model"
	"os"
	"strconv"
	"strings"
	"time"
)

type params struct {
	memory      uint32
	iterations  uint32
	parallelism uint8
	saltLength  uint32
	keyLength   uint32
}

var p = &params{
	memory:      64 * 1024,
	iterations:  3,
	parallelism: 2,
	saltLength:  16,
	keyLength:   32,
}

func generateRandomBytes(n uint32) ([]byte, error) {
	b := make([]byte, n)
	_, err := rand.Read(b)
	if err != nil {
		return nil, err
	}
	return b, nil
}
func hashPassword(password string) (hashedPass string, err error) {
	p := &params{
		memory:      64 * 1024,
		iterations:  3,
		parallelism: 2,
		saltLength:  16,
		keyLength:   32,
	}
	salt, err := generateRandomBytes(p.saltLength)
	if err != nil {
		return "", err
	}
	hash := argon2.IDKey([]byte(password), salt, p.iterations, p.memory, p.parallelism, p.keyLength)
	encodedHash := base64.RawStdEncoding.EncodeToString(hash)
	encodedSalt := base64.RawStdEncoding.EncodeToString(salt)

	return fmt.Sprintf("%s.%s", encodedSalt, encodedHash), nil
}

func generateToken(userID string) (string, error) {
	expirationTime, err := strconv.Atoi(os.Getenv("TOKEN_EXPIRATION"))
	if err != nil {
		return "", fmt.Errorf(customErrors.ErrInternalServer)
	}
	claims := jwt.MapClaims{
		"userID": userID,
		"exp":    time.Now().Add(time.Hour * time.Duration(expirationTime)).Unix(),
	}

	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
	tokenString, err := token.SignedString([]byte(os.Getenv("JWT_SECRET_KEY")))
	if err != nil {
		return "", fmt.Errorf(customErrors.ErrInternalServer)
	}
	return tokenString, nil
}

// SignUp is the resolver for the signUp field.
func (r *mutationResolver) SignUp(ctx context.Context, input *model.SignUpInput) (*model.User, error) {
	_, err := r.UserRepository.GetUserByEmail(input.Email)
	if err != nil && err.Error() != customErrors.ErrUserEmailNotFound {
		return nil, fmt.Errorf(customErrors.ErrInternalServer)
	}
	if err == nil {
		return nil, fmt.Errorf(customErrors.ErrUserEmailAlreadyExists)
	}

	_, err = r.UserRepository.GetUserByUserName(input.Username)
	if err != nil && err.Error() != customErrors.ErrUserNameNotFound {
		return nil, fmt.Errorf(customErrors.ErrInternalServer)
	}
	if err == nil {
		return nil, fmt.Errorf(customErrors.ErrUserNameAlreadyExists)
	}
	hashPass, err := hashPassword(input.Password)
	if err != nil {
		return nil, fmt.Errorf(customErrors.ErrInternalServer)
	}
	input.Password = string(hashPass)
	return r.UserRepository.InsertUser(input)
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input *model.LoginInput) (*model.AuthPayload, error) {
	userStored, err := r.UserRepository.GetUserByEmail(input.Email)
	if err != nil {
		return nil, fmt.Errorf(customErrors.ErrInternalServer)
	}

	storedPass, err := r.UserRepository.GetPassword(input.Email)
	parts := strings.Split(*storedPass, ".")
	if len(parts) != 2 {
		return nil, fmt.Errorf(customErrors.ErrInternalServer)
	}

	encodedSalt := parts[0]
	storedEncodedHash := parts[1]

	salt, err := base64.RawStdEncoding.DecodeString(encodedSalt)
	if err != nil {
		return nil, fmt.Errorf(customErrors.ErrInternalServer)
	}
	hash := argon2.IDKey([]byte(input.Password), salt, p.iterations, p.memory, p.parallelism, p.keyLength)
	inputEncodedHash := base64.RawStdEncoding.EncodeToString(hash)
	if inputEncodedHash != storedEncodedHash {
		return nil, fmt.Errorf(customErrors.ErrEmailOrPassWrong)
	}

	//TOKEN
	token, err := generateToken(*userStored.UserID)
	if err != nil {
		return nil, fmt.Errorf(customErrors.ErrInternalServer)
	}
	//todo TEST AND MODULARIZE ALL, try to use other file for the logic becouse is overriden
	return &model.AuthPayload{token, userStored}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
